//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/workspace/realtime/realtime-channel/src/main/java/com/goodow/realtime/channel/impl/ReliableSubscribeBus.java
//
//  Created by retechretech.
//

#include "IOSClass.h"
#include "com/goodow/realtime/channel/Bus.h"
#include "com/goodow/realtime/channel/BusHook.h"
#include "com/goodow/realtime/channel/Message.h"
#include "com/goodow/realtime/channel/impl/DefaultMessage.h"
#include "com/goodow/realtime/channel/impl/ReliableSubscribeBus.h"
#include "com/goodow/realtime/core/Platform.h"
#include "com/goodow/realtime/core/Scheduler.h"
#include "com/goodow/realtime/json/Json.h"
#include "com/goodow/realtime/json/JsonArray.h"
#include "com/goodow/realtime/json/JsonObject.h"
#include "java/lang/Math.h"
#include "java/lang/Void.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

BOOL GDCReliableSubscribeBus_initialized = NO;

@implementation GDCReliableSubscribeBus

NSString * GDCReliableSubscribeBus_SEQUENCE_NUMBER_ = @"sequence_number_key";
NSString * GDCReliableSubscribeBus_PUBLISH_CHANNEL_ = @"publish_channel";
NSString * GDCReliableSubscribeBus_ACKNOWLEDGE_DELAY_MILLIS_ = @"acknowledgeDelayMillis";
JavaUtilLoggingLogger * GDCReliableSubscribeBus_log_;

- (id)initWithGDCBus:(id<GDCBus>)delegate
    withGDJsonObject:(id<GDJsonObject>)options {
  if (self = [super initWithGDCBus:delegate]) {
    sequenceNumberKey_ = options == nil || ![options has:GDCReliableSubscribeBus_SEQUENCE_NUMBER_] ? @"v" : [options getString:GDCReliableSubscribeBus_SEQUENCE_NUMBER_];
    publishChannel_ = options == nil || ![options has:GDCReliableSubscribeBus_PUBLISH_CHANNEL_] ? @"realtime.store" : [options getString:GDCReliableSubscribeBus_PUBLISH_CHANNEL_];
    acknowledgeDelayMillis_ = options == nil || ![options has:GDCReliableSubscribeBus_ACKNOWLEDGE_DELAY_MILLIS_] ? 3 * 1000 : (int) [options getNumber:GDCReliableSubscribeBus_ACKNOWLEDGE_DELAY_MILLIS_];
    pendings_ = [GDJson createObject];
    currentSequences_ = [GDJson createObject];
    knownHeadSequences_ = [GDJson createObject];
    acknowledgeScheduled_ = [GDJson createObject];
    acknowledgeNumbers_ = [GDJson createObject];
    (void) [((id<GDCBus>) nil_chk(delegate)) setHookWithGDCBusHook:[[GDCReliableSubscribeBus_$1 alloc] initWithGDCReliableSubscribeBus:self]];
  }
  return self;
}

- (void)close {
  [super close];
  (void) [((id<GDJsonObject>) nil_chk(pendings_)) clear];
  (void) [((id<GDJsonObject>) nil_chk(currentSequences_)) clear];
  (void) [((id<GDJsonObject>) nil_chk(knownHeadSequences_)) clear];
  (void) [((id<GDJsonObject>) nil_chk(acknowledgeScheduled_)) clear];
  (void) [((id<GDJsonObject>) nil_chk(acknowledgeNumbers_)) clear];
}

- (void)synchronizeSequenceNumberWithNSString:(NSString *)address
                                   withDouble:(double)initialSequenceNumber {
  NSAssert(![((id<GDJsonObject>) nil_chk(currentSequences_)) has:address] && ![((id<GDJsonObject>) nil_chk(knownHeadSequences_)) has:address] && ![((id<GDJsonObject>) nil_chk(pendings_)) has:address], @"/Users/retechretech/dev/workspace/realtime/realtime-channel/src/main/java/com/goodow/realtime/channel/impl/ReliableSubscribeBus.java:105 condition failed: assert !currentSequences.has(address) && !knownHeadSequences.has(address)\n        && !pendings.has(address);");
  [self initSequenceNumberWithNSString:address withDouble:initialSequenceNumber];
  [self catchupWithNSString:address withDouble:initialSequenceNumber];
}

- (void)catchupWithNSString:(NSString *)address
                 withDouble:(double)currentSequence {
  (void) [((id<GDCBus>) nil_chk(delegate_)) send:[NSString stringWithFormat:@"%@.ops", publishChannel_] message:[((id<GDJsonObject>) nil_chk([((id<GDJsonObject>) nil_chk([GDJson createObject])) set:@"id" value:[address substring:[((NSString *) nil_chk(address)) lastIndexOfString:@":"] + 1]])) set:@"from" number:currentSequence + 1] replyHandler:[[GDCReliableSubscribeBus_$2 alloc] initWithGDCReliableSubscribeBus:self withNSString:address]];
}

- (double)getSequenceNumberWithNSString:(NSString *)address
                                 withId:(id)body {
  return [((id<GDJsonObject>) nil_chk(((id<GDJsonObject>) check_protocol_cast(body, @protocol(GDJsonObject))))) getNumber:sequenceNumberKey_];
}

- (BOOL)needProcessWithNSString:(NSString *)address {
  return [((NSString *) nil_chk(address)) hasPrefix:[NSString stringWithFormat:@"%@:", publishChannel_]];
}

- (BOOL)onReceiveMessageWithGDCMessage:(id<GDCMessage>)message {
  NSString *address = [((id<GDCMessage>) nil_chk(message)) address];
  id body = [message body];
  if (![self needProcessWithNSString:address]) {
    return YES;
  }
  double sequence = [self getSequenceNumberWithNSString:address withId:body];
  if (![((id<GDJsonObject>) nil_chk(currentSequences_)) has:address]) {
    [self initSequenceNumberWithNSString:address withDouble:sequence];
    return YES;
  }
  double currentSequence = [currentSequences_ getNumber:address];
  if (sequence <= currentSequence) {
    [((JavaUtilLoggingLogger *) nil_chk(GDCReliableSubscribeBus_log_)) logWithJavaUtilLoggingLevel:JavaUtilLoggingLevel_get_CONFIG_() withNSString:[NSString stringWithFormat:@"Old dup at sequence %f, current is now %f", sequence, currentSequence]];
    return NO;
  }
  id<GDJsonObject> pending = [((id<GDJsonObject>) nil_chk(pendings_)) getObject:address];
  id<GDCMessage> existing = [((id<GDJsonObject>) nil_chk(pending)) getWithNSString:[NSString stringWithFormat:@"%f", sequence]];
  if (existing != nil) {
    NSAssert(sequence > currentSequence + 1, @"should not have pending data");
    [((JavaUtilLoggingLogger *) nil_chk(GDCReliableSubscribeBus_log_)) logWithJavaUtilLoggingLevel:JavaUtilLoggingLevel_get_CONFIG_() withNSString:[NSString stringWithFormat:@"Dup message: %@", message]];
    return NO;
  }
  (void) [knownHeadSequences_ set:address number:[JavaLangMath maxWithDouble:[((id<GDJsonObject>) nil_chk(knownHeadSequences_)) getNumber:address] withDouble:sequence]];
  if (sequence > currentSequence + 1) {
    (void) [pending set:[NSString stringWithFormat:@"%f", sequence] value:message];
    [((JavaUtilLoggingLogger *) nil_chk(GDCReliableSubscribeBus_log_)) logWithJavaUtilLoggingLevel:JavaUtilLoggingLevel_get_CONFIG_() withNSString:[NSString stringWithFormat:@"Missed message, current sequence=%f incoming sequence=%f", currentSequence, sequence]];
    [self scheduleAcknowledgmentWithNSString:address];
    return NO;
  }
  NSAssert(sequence == currentSequence + 1, @"other cases should have been caught");
  NSString *next;
  while (YES) {
    (void) [((id<GDCBus>) nil_chk(delegate_)) publishLocal:[message address] message:[message body]];
    (void) [currentSequences_ set:address number:++currentSequence];
    next = [NSString stringWithFormat:@"%f", currentSequence + 1];
    message = [pending getWithNSString:next];
    if (message != nil) {
      (void) [pending removeWithNSString:next];
    }
    else {
      break;
    }
  }
  NSAssert(![pending has:next], @"/Users/retechretech/dev/workspace/realtime/realtime-channel/src/main/java/com/goodow/realtime/channel/impl/ReliableSubscribeBus.java:190 condition failed: assert !pending.has(next);");
  return NO;
}

- (void)initSequenceNumberWithNSString:(NSString *)address
                            withDouble:(double)initialSequenceNumber {
  (void) [((id<GDJsonObject>) nil_chk(currentSequences_)) set:address number:initialSequenceNumber];
  (void) [((id<GDJsonObject>) nil_chk(knownHeadSequences_)) set:address number:initialSequenceNumber];
  (void) [((id<GDJsonObject>) nil_chk(pendings_)) set:address value:[GDJson createObject]];
}

- (void)scheduleAcknowledgmentWithNSString:(NSString *)address {
  if (![((id<GDJsonObject>) nil_chk(acknowledgeScheduled_)) has:address]) {
    (void) [acknowledgeScheduled_ set:address boolean:YES];
    [((id<ComGoodowRealtimeCoreScheduler>) nil_chk([ComGoodowRealtimeCorePlatform scheduler])) scheduleDelayWithInt:acknowledgeDelayMillis_ withComGoodowRealtimeCoreHandler:[[GDCReliableSubscribeBus_$3 alloc] initWithGDCReliableSubscribeBus:self withNSString:address]];
  }
}

+ (void)initialize {
  if (self == [GDCReliableSubscribeBus class]) {
    GDCReliableSubscribeBus_log_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[GDCReliableSubscribeBus class]] getName]];
    GDCReliableSubscribeBus_initialized = YES;
  }
}

- (void)copyAllFieldsTo:(GDCReliableSubscribeBus *)other {
  [super copyAllFieldsTo:other];
  other->acknowledgeDelayMillis_ = acknowledgeDelayMillis_;
  other->acknowledgeNumbers_ = acknowledgeNumbers_;
  other->acknowledgeScheduled_ = acknowledgeScheduled_;
  other->currentSequences_ = currentSequences_;
  other->knownHeadSequences_ = knownHeadSequences_;
  other->pendings_ = pendings_;
  other->publishChannel_ = publishChannel_;
  other->sequenceNumberKey_ = sequenceNumberKey_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithGDCBus:withGDJsonObject:", "ReliableSubscribeBus", NULL, 0x1, NULL },
    { "close", NULL, "V", 0x1, NULL },
    { "synchronizeSequenceNumberWithNSString:withDouble:", "synchronizeSequenceNumber", "V", 0x1, NULL },
    { "catchupWithNSString:withDouble:", "catchup", "V", 0x4, NULL },
    { "getSequenceNumberWithNSString:withId:", "getSequenceNumber", "D", 0x4, NULL },
    { "needProcessWithNSString:", "needProcess", "Z", 0x4, NULL },
    { "onReceiveMessageWithGDCMessage:", "onReceiveMessage", "Z", 0x4, NULL },
    { "initSequenceNumberWithNSString:withDouble:", "initSequenceNumber", "V", 0x2, NULL },
    { "scheduleAcknowledgmentWithNSString:", "scheduleAcknowledgment", "V", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "SEQUENCE_NUMBER_", NULL, 0x19, "Ljava.lang.String;", &GDCReliableSubscribeBus_SEQUENCE_NUMBER_,  },
    { "PUBLISH_CHANNEL_", NULL, 0x19, "Ljava.lang.String;", &GDCReliableSubscribeBus_PUBLISH_CHANNEL_,  },
    { "ACKNOWLEDGE_DELAY_MILLIS_", NULL, 0x19, "Ljava.lang.String;", &GDCReliableSubscribeBus_ACKNOWLEDGE_DELAY_MILLIS_,  },
    { "log_", NULL, 0x1a, "Ljava.util.logging.Logger;", &GDCReliableSubscribeBus_log_,  },
    { "sequenceNumberKey_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "publishChannel_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "acknowledgeDelayMillis_", NULL, 0x12, "I", NULL,  },
    { "pendings_", NULL, 0x12, "Lcom.goodow.realtime.json.JsonObject;", NULL,  },
    { "currentSequences_", NULL, 0x12, "Lcom.goodow.realtime.json.JsonObject;", NULL,  },
    { "knownHeadSequences_", NULL, 0x12, "Lcom.goodow.realtime.json.JsonObject;", NULL,  },
    { "acknowledgeScheduled_", NULL, 0x12, "Lcom.goodow.realtime.json.JsonObject;", NULL,  },
    { "acknowledgeNumbers_", NULL, 0x12, "Lcom.goodow.realtime.json.JsonObject;", NULL,  },
  };
  static J2ObjcClassInfo _GDCReliableSubscribeBus = { "ReliableSubscribeBus", "com.goodow.realtime.channel.impl", NULL, 0x1, 9, methods, 12, fields, 0, NULL};
  return &_GDCReliableSubscribeBus;
}

@end

@implementation GDCReliableSubscribeBus_$1

- (BOOL)handleReceiveMessageWithGDCMessage:(id<GDCMessage>)message {
  if (this$0_->hook_ != nil && ![this$0_->hook_ handleReceiveMessageWithGDCMessage:message]) {
    return NO;
  }
  return [this$0_ onReceiveMessageWithGDCMessage:message];
}

- (BOOL)handleUnregisterWithNSString:(NSString *)address {
  if ([this$0_ needProcessWithNSString:address]) {
    (void) [((id<GDJsonObject>) nil_chk(this$0_->pendings_)) removeWithNSString:address];
    (void) [((id<GDJsonObject>) nil_chk(this$0_->currentSequences_)) removeWithNSString:address];
    (void) [((id<GDJsonObject>) nil_chk(this$0_->knownHeadSequences_)) removeWithNSString:address];
    (void) [((id<GDJsonObject>) nil_chk(this$0_->acknowledgeScheduled_)) removeWithNSString:address];
    (void) [((id<GDJsonObject>) nil_chk(this$0_->acknowledgeNumbers_)) removeWithNSString:address];
  }
  return [super handleUnregisterWithNSString:address];
}

- (id<GDCBusHook>)delegate {
  return this$0_->hook_;
}

- (id)initWithGDCReliableSubscribeBus:(GDCReliableSubscribeBus *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "handleReceiveMessageWithGDCMessage:", "handleReceiveMessage", "Z", 0x1, NULL },
    { "handleUnregisterWithNSString:", "handleUnregister", "Z", 0x1, NULL },
    { "delegate", NULL, "Lcom.goodow.realtime.channel.BusHook;", 0x4, NULL },
    { "initWithGDCReliableSubscribeBus:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.goodow.realtime.channel.impl.ReliableSubscribeBus;", NULL,  },
  };
  static J2ObjcClassInfo _GDCReliableSubscribeBus_$1 = { "$1", "com.goodow.realtime.channel.impl", "ReliableSubscribeBus", 0x8000, 4, methods, 1, fields, 0, NULL};
  return &_GDCReliableSubscribeBus_$1;
}

@end

@implementation GDCReliableSubscribeBus_$2

- (void)handleWithId:(id<GDCMessage>)message {
  NSString *replyAddress = [((id<GDCMessage>) nil_chk(message)) replyAddress];
  [((id<GDJsonArray>) nil_chk([message body])) forEach:[[GDCReliableSubscribeBus_$2_$1 alloc] initWithGDCReliableSubscribeBus_$2:self withNSString:replyAddress]];
}

- (id)initWithGDCReliableSubscribeBus:(GDCReliableSubscribeBus *)outer$
                         withNSString:(NSString *)capture$0 {
  this$0_ = outer$;
  val$address_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "handleWithGDCMessage:", "handle", "V", 0x1, NULL },
    { "initWithGDCReliableSubscribeBus:withNSString:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.goodow.realtime.channel.impl.ReliableSubscribeBus;", NULL,  },
    { "val$address_", NULL, 0x1012, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _GDCReliableSubscribeBus_$2 = { "$2", "com.goodow.realtime.channel.impl", "ReliableSubscribeBus", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_GDCReliableSubscribeBus_$2;
}

@end

@implementation GDCReliableSubscribeBus_$2_$1

- (void)callWithInt:(int)index
             withId:(id)value {
  [this$0_->this$0_ onReceiveMessageWithGDCMessage:[[GDCDefaultMessage alloc] initWithBoolean:NO withBoolean:NO withGDCBus:this$0_->this$0_ withNSString:this$0_->val$address_ withNSString:val$replyAddress_ withId:value]];
}

- (id)initWithGDCReliableSubscribeBus_$2:(GDCReliableSubscribeBus_$2 *)outer$
                            withNSString:(NSString *)capture$0 {
  this$0_ = outer$;
  val$replyAddress_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "callWithInt:withId:", "call", "V", 0x1, NULL },
    { "initWithGDCReliableSubscribeBus_$2:withNSString:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.goodow.realtime.channel.impl.ReliableSubscribeBus$2;", NULL,  },
    { "val$replyAddress_", NULL, 0x1012, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _GDCReliableSubscribeBus_$2_$1 = { "$1", "com.goodow.realtime.channel.impl", "ReliableSubscribeBus$$2", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_GDCReliableSubscribeBus_$2_$1;
}

@end

@implementation GDCReliableSubscribeBus_$3

- (void)handleWithId:(id)event {
  if ([((id<GDJsonObject>) nil_chk(this$0_->acknowledgeScheduled_)) has:val$address_]) {
    (void) [this$0_->acknowledgeScheduled_ removeWithNSString:val$address_];
    double knownHeadSequence = [((id<GDJsonObject>) nil_chk(this$0_->knownHeadSequences_)) getNumber:val$address_];
    double currentSequence = [((id<GDJsonObject>) nil_chk(this$0_->currentSequences_)) getNumber:val$address_];
    if (knownHeadSequence > currentSequence && (![((id<GDJsonObject>) nil_chk(this$0_->acknowledgeNumbers_)) has:val$address_] || knownHeadSequence > [this$0_->acknowledgeNumbers_ getNumber:val$address_])) {
      (void) [((id<GDJsonObject>) nil_chk(this$0_->acknowledgeNumbers_)) set:val$address_ number:knownHeadSequence];
      [((JavaUtilLoggingLogger *) nil_chk(GDCReliableSubscribeBus_get_log_())) logWithJavaUtilLoggingLevel:JavaUtilLoggingLevel_get_CONFIG_() withNSString:[NSString stringWithFormat:@"Catching up to %f", knownHeadSequence]];
      [this$0_ catchupWithNSString:val$address_ withDouble:currentSequence];
    }
    else {
      [((JavaUtilLoggingLogger *) nil_chk(GDCReliableSubscribeBus_get_log_())) logWithJavaUtilLoggingLevel:JavaUtilLoggingLevel_get_FINE_() withNSString:@"No need to catchup"];
    }
  }
}

- (id)initWithGDCReliableSubscribeBus:(GDCReliableSubscribeBus *)outer$
                         withNSString:(NSString *)capture$0 {
  this$0_ = outer$;
  val$address_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "handleWithJavaLangVoid:", "handle", "V", 0x1, NULL },
    { "initWithGDCReliableSubscribeBus:withNSString:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.goodow.realtime.channel.impl.ReliableSubscribeBus;", NULL,  },
    { "val$address_", NULL, 0x1012, "Ljava.lang.String;", NULL,  },
  };
  static J2ObjcClassInfo _GDCReliableSubscribeBus_$3 = { "$3", "com.goodow.realtime.channel.impl", "ReliableSubscribeBus", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_GDCReliableSubscribeBus_$3;
}

@end
